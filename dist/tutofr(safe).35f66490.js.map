{"version":3,"sources":["tutofr(safe).js"],"names":["lat_home","lon_home","macarte","markerClusters","list","city","Array","initCoord","min","max","Math","random","initPoint","point","Lat","Lon","Alt","test","ville","Object","id","lat","lon","alt","push","initMap","L","map","setView","markerClusterGroup","tileLayer","attribution","minZoom","maxZoom","addTo","home","circle","color","fillColor","fillOpacity","radius","myIcon","icon","iconSize","iconAnchor","popupAnchor","console","log","Routing","control","waypoints","latLng","lineOptions","styles","className","draggableWaypoints","addWaypoints","marker","bindPopup","addLayer","window","onload"],"mappings":"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","file":"tutofr(safe).35f66490.js","sourceRoot":"..","sourcesContent":["// On initialise la latitude et la longitude de l'habitation du client (centre de la carte)\n// Au préalable séléctionné/donné par l'utilisateur, dans le cas contraire:\n// Se positionner sur Paris.\n        var lat_home = 48.73056610085155;\n        var lon_home = -3.460834918664013;\n        var macarte = null;\n        var markerClusters; // Servira à stocker les groupes de marqueurs\n\n        // Nous initialisons un tableau city qui contiendra les \"ville\"\n        //list = nombre d'enregistrement fait par le GPS encore en mémoire\n        var list = 10;\n        let city = new Array(list);\n\n        //fonction donnant un nombre random entre un min et un max\n        function initCoord(min, max){\n          min = min;\n          max = max;\n          return Math.random() * (max - min) + min;\n        }\n\n        // Fonction d'initialisation des points (randoms) sur la carte\n        function initPoint() {\n          for (let point = 0; point < 10; point++){\n\n            // Pour la France et ses alentours:\n            //Lat = initCoord(42, 51);\n            //Lon = initCoord(-4, 8);\n\n            // Pour la Bretagne et ses alentours:\n            Lat = initCoord(47.97, 48.5);\n            Lon = initCoord(-4, -1);\n            Alt = initCoord(-4, 20);\n            let test = {\n              \"id\": point,\n              \"Longitude\": Lon,\n              \"Lattitude\": Lat,\n              \"Altitude\": Alt,\n            };\n            var ville = new Object();\n            ville.id = point;\n            ville.lat = Lat;\n            ville.lon = Lon;\n            ville.alt = Alt;\n            city.push(ville);\n          }\n        }\n        initPoint();\n\n        // Fonction d'initialisation de la carte\n        function initMap() {\n  \t       // Créer l'objet \"macarte\" et l'insèrer dans l'élément HTML qui a l'ID \"map\"\n  \t       macarte = L.map('map').setView([lat_home, lon_home], 11);\n           markerClusters = L.markerClusterGroup(); // Nous initialisons les groupes de marqueurs\n  \t       // Leaflet ne récupère pas les cartes (tiles) sur un serveur par défaut. Nous devons lui préciser où nous souhaitons les récupérer. Ici, openstreetmap.fr\n           L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {\n\t\t           // Source des données\n\t\t           attribution: 'données © OpenStreetMap/ODbL - rendu OSM France',\n\t\t           minZoom: 1,\n\t\t           maxZoom: 20\n  \t       }).addTo(macarte);\n\n           //Création du périmêtre de la maison, autour du quel, la position du chien n'est pas pris en compte\n           var home = L.circle([48.732675, -3.446217], {\n             color: 'red',\n             fillColor: '#f03',\n             fillOpacity: 0.5,\n             //Radius = Rayon \"Maison\"\n             radius: 500\n          }).addTo(macarte);\n\n           //test pour ajout dans tableau city\n           for (ville in city) {\n             // Nous définissons l'icône à utiliser pour le marqueur, sa taille affichée (iconSize), sa position (iconAnchor) et le décalage de son ancrage (popupAnchor)\n             var myIcon = L.icon({\n             iconSize: [50, 50],\n             iconAnchor: [25, 50],\n             popupAnchor: [-3, -76],\n             });\n             console.log(city[ville].lat);\n             console.log(city[ville].lon);\n             console.log(city[ville].alt);\n\n             //for (var i = 0; i < list; i++) {\n               //Création du tracé GPS\n               L.Routing.control({\n                 waypoints: [\n                   L.latLng(48.56036426785153, -3.1599197957359926),\n                   //L.latLng(ville[i].lat, ville[i].lon),\n                   L.latLng(48.51278434587372, -2.779401099923159)\n                   //L.latLng(ville[i+1].lat, ville[i+1].lon)\n                 ],\n                 // Class \"animate\" permet de régler (en CSS) certain détail de l'animation (vitesse d'exécution, temps avant exécution, coleur, etc...)\n                 lineOptions: {\n                   styles: [{className: 'animate'}]\n                 },\n                 draggableWaypoints: false,\n                 addWaypoints: false\n               }).addTo(macarte);\n             //}\n\n             var marker = L.marker([city[ville].lat, city[ville].lon, city[ville].alt]).addTo(macarte);\n             // Nous ajoutons la popup. A noter que son contenu (ici la variable ville) peut être du HTML\n             marker.bindPopup(`<b> ${ville} <b><br>Lattitude: ${city[ville].lat} <br>Longitude: ${city[ville].lon} <br>Altitude: ${city[ville].alt} MAMSL`);\n             //markerClusters.addLayer(marker); // Nous ajoutons le marqueur aux groupes\n          }\n           macarte.addLayer(markerClusters);\n           // Nous ajoutons la popup. A noter que son contenu (ici la variable ville) peut être du HTML\n           home.bindPopup(\"Maison\")\n        }\n        window.onload = function(){\n\t\t    // Fonction d'initialisation qui s'exécute lorsque le DOM est chargé\n\t\t    initMap();\n      };\n"]}